apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def appCompat = '1.0.0'

android {
    compileSdkVersion 30
    buildToolsVersion '29.0.3'
    defaultConfig {
        applicationId "com.twoeightnine.root.xvii"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 168
        versionName "5.21.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        project.ext.set("archivesBaseName", "xvii" + defaultConfig.versionName)

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        manifestPlaceholders = [adAppId:getLocalProperty("advertising.appId")]
        resConfigs "en", "fr", "ru"
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "BUILD_TIME", "\"${getDate()}\"")
            buildConfigField("String", "AD_ID", "\"${getLocalProperty('advertising.id')}\"")
        }
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "BUILD_TIME", "\"${getDate()}\"")
            buildConfigField("String", "AD_ID", "\"${getLocalProperty('advertising.id')}\"")
        }
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0-alpha4', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation "androidx.appcompat:appcompat:$appCompat"
    implementation "com.google.android.material:material:$appCompat"
    implementation "androidx.recyclerview:recyclerview:1.1.0"

    lifecycle()
    retrofit()
    room()
    workManager()
    okhttp()

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    implementation "com.google.code.gson:gson:2.8.6"

    implementation "io.reactivex.rxjava2:rxjava:2.2.9"
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"
    implementation 'com.jakewharton.rxbinding:rxbinding:1.0.1'

    kapt "com.google.dagger:dagger-compiler:2.7"
    implementation "com.google.dagger:dagger:2.7"
    compileOnly "javax.annotation:jsr250-api:1.0"

    implementation 'com.github.bumptech.glide:glide:4.11.0'
    implementation "com.squareup.picasso:picasso:2.71828"
    implementation "de.hdodenhof:circleimageview:3.1.0"
    implementation "com.github.orangegangsters:swipy:1.2.3@aar"
    testImplementation "junit:junit:4.12"
    implementation "com.github.QuadFlask:colorpicker:0.0.13"
    implementation 'io.github.inflationx:calligraphy3:3.1.1'
    implementation 'io.github.inflationx:viewpump:2.0.3'


    implementation 'com.google.android.gms:play-services-ads:19.4.0'
}

def lifecycle() {
    dependencies {
        def lifecycle_version = "2.2.0"

        implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
        implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
        implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    }
}

def okhttp() {
    dependencies {
        def okhttp_version = "3.14.6"

        implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
        implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    }
}

def retrofit() {
    dependencies {
        def retrofit_version = "2.5.0"

        implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
        implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
        implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    }
}

def room() {
    dependencies {
        def room_version = "2.1.0-alpha06"

        implementation "androidx.room:room-runtime:$room_version"
        kapt "androidx.room:room-compiler:$room_version"
        implementation "androidx.room:room-rxjava2:$room_version"
    }
}

def workManager() {
    dependencies {
        def work_version = "2.4.0"

        implementation "androidx.work:work-runtime:$work_version"
        implementation "androidx.work:work-runtime-ktx:$work_version"

    }
}

kapt {
    generateStubs = true
}

androidExtensions {
    experimental = true
}

repositories {
    mavenCentral()
}

static def getDate() {
    new Date().format('yyyy-MM-dd')
}

def getLocalProperty(String propName) {
    def propsFile = rootProject.file('local.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        return props[propName]
    } else {
        return ""
    }
}
