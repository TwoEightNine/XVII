apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: "$project.rootDir/dependencies.gradle"

android {
    compileSdkVersion androidVersions.compileSdkVersion
    buildToolsVersion androidVersions.buildToolsVersion

    defaultConfig {
        applicationId androidApp.applicationId
        minSdkVersion androidVersions.minSdkVersion
        targetSdkVersion androidVersions.targetSdkVersion

        versionCode androidApp.versionCode
        versionName androidApp.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        project.ext.set("archivesBaseName", "xvii" + defaultConfig.versionName)

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        resConfigs "en", "fr", "ru"
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "BUILD_TIME", "\"${getDate()}\"")
        }
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "BUILD_TIME", "\"${getDate()}\"")
        }
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':core')
    implementation project(':data')
    implementation project(':uikit')

    implementation kotlin.kotlin

    implementation androidUi.appCompat
    implementation androidUi.material
    implementation androidUi.recyclerView
    implementation androidUi.coreKtx
    implementation androidUi.fragmentKtx

    implementation lifecycle.extensions
    implementation lifecycle.viewModel
    implementation lifecycle.liveData

    implementation room.runtime
    implementation room.rxJava
    kapt room.compiler

    implementation workManager.runtime
    implementation workManager.runtimeKtx

    implementation retrofit.retrofit
    implementation retrofit.gsonConverter
    implementation retrofit.rxAdapter

    implementation okHttp.okHttp
    implementation okHttp.logging

    implementation reactiveX.rxJava
    implementation reactiveX.rxAndroid
    implementation reactiveX.rxBinding

    kapt dagger.compiler
    implementation dagger.dagger
    compileOnly dagger.jsr

    implementation utils.gson
    implementation utils.glide

    implementation externalUi.circleImageView
    implementation externalUi.swipy
    implementation externalUi.colorPicker
    implementation externalUi.calligraphy
    implementation externalUi.viewPump
    implementation externalUi.imageCropper
    implementation externalUi.roundedImageView

    testImplementation androidTests.jUnit
    androidTestImplementation androidTests.espresso
}

kapt {
    generateStubs = true
}

androidExtensions {
    experimental = true
}

repositories {
    mavenCentral()
}

static def getDate() {
    new Date().format('yyyy-MM-dd')
}

def getLocalProperty(String propName) {
    def propsFile = rootProject.file('local.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        return props[propName]
    } else {
        return ""
    }
}
